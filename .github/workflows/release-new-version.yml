name: Release new version
run-name: New release for "${{ github.ref_name }}" triggered by ${{ github.actor }}

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
      tag_suffix:
        required: true
        type: string
      environment:
        required: true
        type: string

env:
  ECR_REPOSITORY: 'filplus-registry'

jobs:
  format_and_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '16.14.2'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run prettier

  build_and_push:
    needs: format_and_lint
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Run release process for ${{ inputs.environment }}
        run: |
          echo "Tag suffix: ${{ inputs.tag_suffix }}"
          echo "Environment: ${{ inputs.environment }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-build-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registry-type: public

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: public.ecr.aws/f4h6r4m9/${{ env.ECR_REPOSITORY }}
          tags: |
            type=semver,pattern={{branch}}-{{version}},value=v${{ inputs.version }},suffix={{ matrix.tag_suffix }},enable=${{inputs.version != ''}}
            type=ref,event=branch,pattern={{branch}},suffix={{ matrix.tag_suffix }},enable=${{ github.ref_name == 'workflow' }}
            type=ref,event=pr,pattern={{branch}}

      - name: Create env file
        run: |
          echo "NEXT_PUBLIC_API_URL='${{ vars.NEXT_PUBLIC_API_URL }}'" >> .env
          echo "NEXT_PUBLIC_DMOB_API_KEY='${{ vars.NEXT_PUBLIC_DMOB_API_KEY }}'" >> .env
          echo "NEXT_PUBLIC_MODE='${{ vars.NEXT_PUBLIC_MODE }}'" >> .env
          echo "NEXT_PUBLIC_NODE_ADDRESS='${{ vars.NEXT_PUBLIC_NODE_ADDRESS }}'" >> .env
          echo "NEXT_PUBLIC_NODE_TOKEN='${{ vars.NEXT_PUBLIC_NODE_TOKEN }}'" >> .env
          echo "NEXT_PUBLIC_DMOB_API_URL='${{ vars.NEXT_PUBLIC_DMOB_API_URL }}'" >> .env
          echo "NEXT_PUBLIC_GLIF_URL='${{ vars.NEXT_PUBLIC_GLIF_URL }}'" >> .env
          echo "NEXTAUTH_URL='${{ vars.NEXTAUTH_URL }}'" >> .env
          echo "NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}'" >> .env
          echo "GITHUB_ID='${{ secrets.GH_ID }}'" >> .env
          echo "GITHUB_SECRET='${{ secrets.GH_SECRET }}'" >> .env

      - name: Build tag
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          github-token: ${{ secrets.GITHUB_TOKEN }}
          outputs: type=cacheonly

      # - name: Create and push tag
      #   if: ${{ github.ref == format('refs/heads/{0}', 'main') && inputs.version != '' }}
      #   run: |
      #     TAG_NAME="v${{ steps.meta.outputs.tags }}"
      #     git tag $TAG_NAME
      #     git push origin $TAG_NAME
